using System;
using System.Diagnostics;
using System.Text;
using System.Threading;

class Program
{
    static string storedUsername = null;
    static string storedPassword = null;

    // Change this to the folder where CMD should start:
    static string currentDir = @"C:\Users\Public";

    static void Main()
    {
        Console.OutputEncoding = Encoding.UTF8;
        Console.WriteLine("=== Login System ===\n");

        // First-time setup
        if (storedUsername == null || storedPassword == null)
        {
            Console.WriteLine("No user found. Let's create one.");
            Console.Write("New username: ");
            storedUsername = Console.ReadLine();
            Console.Write("New password: ");
            storedPassword = Console.ReadLine();
            Console.WriteLine("‚úÖ Account created successfully!\n");
        }

        // Login phase
        bool loggedIn = false;
        while (!loggedIn)
        {
            Console.Write("Username: ");
            string username = Console.ReadLine();
            Console.Write("Password: ");
            string password = Console.ReadLine();

            Console.WriteLine("\nChecking credentials...");
            SimulateLoginBar(100, 20); // use new download-style bar

            if (username == storedUsername && password == storedPassword)
            {
                Console.WriteLine("\n‚úÖ Login successful!\n");
                loggedIn = true;
            }
            else
            {
                Console.WriteLine("\n‚ùå Incorrect username or password. Try again.\n");
            }
        }

        // CMD shell
        Console.WriteLine("=== CMD Mode ===");
        Console.WriteLine("Type 'exit' to quit.\n");

        while (true)
        {
            Console.Write($"CMD ({currentDir})> ");
            string cmd = Console.ReadLine();

            if (cmd.ToLower() == "exit")
                break;

            // Basic `cd` support
            if (cmd.ToLower().StartsWith("cd "))
            {
                string newDir = cmd.Substring(3).Trim();
                if (System.IO.Directory.Exists(newDir))
                {
                    currentDir = newDir;
                    Console.WriteLine("üìÅ Directory changed.");
                }
                else
                {
                    Console.WriteLine("‚ö†Ô∏è Directory not found.");
                }
                continue;
            }

            RunCmd(cmd);
        }
    }

    // Your improved download-style progress bar
    static void DrawBar(int current, int total, int width = 50)
    {
        double progress = (double)current / total;
        int filled = (int)(progress * width);
        string bar = new string('#', filled) + new string('-', width - filled);
        Console.Write($"\r[{bar}] {progress * 100:0.0}%");
    }

    // Use bar during login check
    static void SimulateLoginBar(int total, int delayMs)
    {
        for (int i = 0; i <= total; i++)
        {
            DrawBar(i, total);
            Thread.Sleep(delayMs);
        }
        Console.WriteLine();
    }

    static void RunCmd(string command)
    {
        try
        {
            ProcessStartInfo psi = new ProcessStartInfo("cmd.exe", "/c " + command)
            {
                RedirectStandardOutput = true,
                RedirectStandardError = true,
                UseShellExecute = false,
                CreateNoWindow = true,
                WorkingDirectory = currentDir
            };

            Process process = new Process { StartInfo = psi };
            process.Start();

            string output = process.StandardOutput.ReadToEnd();
            string error = process.StandardError.ReadToEnd();
            process.WaitForExit();

            if (!string.IsNullOrWhiteSpace(output))
                Console.WriteLine(output);
            if (!string.IsNullOrWhiteSpace(error))
                Console.WriteLine("‚ö†Ô∏è " + error);
        }
        catch (Exception ex)
        {
            Console.WriteLine("‚ö†Ô∏è Error: " + ex.Message);
        }
    }
}